package innerClassDemo.burger;

import java.util.ArrayList;
import java.util.List;

public class Meal {

	private double price = 5.0;
	private Burger burgerObj;
	private Item burger;
	private Item drink;
	private Item side;
	private double conversionRate;
	
	public Meal() {
		this(1);
	}
	
	public Meal(double conversionRate) {
		
		burgerObj = new Burger(); // when I instantiate the Meal obj Burger obj also got instantiated
		
		this.conversionRate= conversionRate;
		this.burger = new Item("regular", "burger");
		this.drink = new Item("coke","drink", 1.5);
		System.out.println(drink.name);
		this.side = new Item("fries", "side", 2.0);
	}
	
	private double getTotal() {
		double total = burger.price + drink.price + side.price;
		return Item.getPrice(total, conversionRate);
	}
	
	//This method will take the variable strings for the toppings
	public void addToppings(String... toppings){
		for(String topping: toppings) {
			burgerObj.toppingList.add(topping);
		}
	}  
	
	// List all the toppings
	public void listToppings() {
		burgerObj.getToppings();
	}
	
	@Override
	public String toString() {
		return "%s%n%s%n%s%n%26s$%.2f".formatted(burger,drink,side,
				"Total due: ", getTotal());
	}
	
	
	//Inner Nested class demo
	private class Item {
		private String name;
		private String type;
		private double price;
		
		private Item(String name, String type) {
			this(name,type, type.equals("burger")? Meal.this.price:0);
		}
		
		private Item(String name, String type, double price) {
			this.name=name;
			this.type=type;
			this.price= price;
		}
		
		private static double getPrice(double price, double rate) {
			return price*rate;
		}
		
		@Override
		public String toString() {
			return "%10s%15s $%.2f".formatted(name, type, getPrice(price,conversionRate));
		}
	}
	
	
	//Another inner nested class
	private class Burger{
		
		private List<String> toppingList;
		
		private Burger() {
			
			this.toppingList = new ArrayList<>();
		}
		
		private void  getToppings(){
			
			for(String topping: toppingList) {
				System.out.println(topping);
		}
		
		
		}
		
	
	
	
}
